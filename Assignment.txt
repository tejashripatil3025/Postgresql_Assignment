Table 1:authors

CREATE TABLE authors (
    id SERIAL NOT NULL PRIMARY KEY,
    name varchar(50) NOT NULL
);
===========================================================

Table 2:books

CREATE TABLE books (
    id SERIAL NOT NULL PRIMARY KEY,
    title varchar(100) NOT NULL,
	author_id SERIAL NOT NULL,
	FOREIGN KEY(author_id) REFERENCES authors(id)
);
=============================================================

Table 3:reviews

CREATE TABLE reviews (
    id SERIAL NOT NULL PRIMARY KEY,
	rating INTEGER,
	reviewer_id INTEGER,
	FOREIGN KEY(reviewer_id) REFERENCES authors(id),
	book_id SERIAL,
	FOREIGN KEY(book_id) REFERENCES books(id)
);
==============================================================
Write a query that will join together these two tables. 
1.For each book, print the title of the book and name of the author.  
--------------------------------------------------------------------
SELECT books.id, title, authors.id AS author_id,name AS author
FROM books
LEFT JOIN authors ON authors.id = books.author_id;
===================================================================

2.Return title of each book, along with the name of the author.
 All authors should be included, even if they don’t have a book associated with them. 

(You need to provide two possible solutions using Joins)  
------------------------------------------------------------------------
SELECT books.id, title,authors.id AS author_id, name AS author
FROM books
FULL JOIN authors ON authors.id = books.author_id;
========================================================================
4.Prints an author’s id and the number of books they have authored. 

(Check do you need two tables for this query). 
---------------------------------------------------------------------
SELECT authors.id AS author_id,count(books.id) AS no_of_books
FROM books
FULL JOIN authors ON authors.id = books.author_id
GROUP BY authors.id
ORDER BY authors.id;

=======================================================================================
5.Print an author’s name and the number of books they have authored. 
-----------------------------------------------------------------------
SELECT name AS author, count(books.id) AS no_of_books
FROM books
FULL JOIN authors ON authors.id = books.author_id
GROUP BY authors.id
ORDER BY name;
=======================================================================================

CREATE TABLE Phones(name Varchar(50), manufacturer varchar(100),price INTEGER,
units sold INTEGER);
-----------------------------------------------------------------------------
1.Write a query that prints the name of manufacturers and total revenue (price * units_sold) for all phones. Only print the manufacturers who 
have revenue greater than 2,000,00 for all phones they sold. 
-------------------------------------------------------------------------
SELECT manufacturer, price*units_sold AS total_revenue from phones
WHERE  price*units_sold > 2000000;
=========================================================================
2.Answer

SELECT name FROM phones
ORDER BY price DESC
LIMIT 2 OFFSET 1;
========================================================================
3. Answer

SELECT DISTINCT	 manufacturer FROM phones
WHERE price < 170 or manufacturer IN(
	SELECT manufacturer FROM phones
	GROUP BY manufacturer HAVING count(manufacturer) >2);
==========================================================================
4. Answer

SELECT name, price, 1.0 * price/MAX(price) OVER() price_ratio FROM phones;
==========================================================================
5. Answer

SELECT name, price from phones WHERE units_sold > 5000;

==========================================================================
6. Answer

SELECT name, manufacturer from phones
WHERE manufacturer='Apple' OR manufacturer='Samsung';
==========================================================================

7.Aswer

SELECT name, price*units_sold AS total_revenue from phones
WHERE price*units_sold > 1000000;
==========================================================================



















